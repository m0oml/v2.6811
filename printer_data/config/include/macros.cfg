#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:

    SAVE_GCODE_STATE NAME=STATE_G32
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G90
        _STATUS_HOMING
        G28
    {% endif %}

    {% if printer.quad_gantry_level.applied|lower == 'false' %}
        {% if V %}
            RESPOND MSG="QGL..."
        {% endif %}
        _STATUS_LEVELING
        QUAD_GANTRY_LEVEL
        _STATUS_HOMING
        G28
        G0 Z50 F3600
    {% endif %}
    RESTORE_GCODE_STATE NAME=STATE_G32
    G0 X175 Y175 Z10



[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    _FRONT
    PAUSE                ; Pause


[gcode_macro TURN_OFF_HEATERS]
rename_existing: NEVERMORE_CONTROLLER_INNER_TURN_OFF_HEATERS
gcode:
    _BEDFANSOFF
    NEVERMORE_CONTROLLER_INNER_TURN_OFF_HEATERS
    # See <<NEVERMORE_PRINT_END>> for options.
    NEVERMORE_PRINT_END
    
#####################################################################
#   print_start macro
#####################################################################



[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0  

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  _STATUS_HOMING         # Sets SB-leds to homing-mode
  _CHOME                   # Full home (XYZ)
  G90                   # Absolut position

  BED_MESH_CLEAR    

  NEVERMORE_PRINT_START
 
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    _STATUS_HEATING                                      # Sets SB-leds to heating-mode
    #M106 S255                                           # Turns on the PT-fan
    #SET_HEATER_TEMPERATURE HEATER=Chamber TARGET={target_chamber}

    #G1 X175 Y50 Z175 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    
    
  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    _STATUS_HEATING                                      # Sets SB-leds to heaenting-mode
    M190 S{target_bed}                                  # Sets the target temp for the bed
    # SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    # G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  M109 S150
  CLEAN_NOPURGE
  G28 Z METHOD=CONTACT CALIBRATE=1 

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  _STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  G32
  
  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  _STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1

  
  CLEAN_NOPURGE
  
  G28 Z METHOD=CONTACT CALIBRATE=0   
  G0 X46 Y357 Z2

  # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  _STATUS_HEATING                                                # Sets SB-leds to heating-mode
  #G0 X46 Y357 Z2                                                  # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp


  
  
  # Gets ready to print by doing a purge line and updating the SB-leds
  CLEAN_PURGE
  G1 Z20 F5000
  G0 X175 Y175 F12000
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  _STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  #G1 X100 E20 F1000                                # Purge line
  
  SET_GCODE_OFFSET Z=0.075

  G1 Z20 F3600
  #G1 Y260 F8000
  G90                                              # Absolut position



   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    # SET_FAN_SPEED FAN=Nevermore SPEED=1

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X110 Y356 F3600  ; park nozzle
    M107                                     ; turn off fan
    # UPDATE_DELAYED_GCODE ID=filter_off DURATION=300
    
    CLEAR_ACTIVE_SPOOL
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _STATUS_READY

[gcode_macro _CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _FRONT]
description: Moves the toolhead to the front
gcode:
  _CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X10 Y10 F7800

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(250)|int %}
  _CHOME
  G91                         ; relative positioning
  G1 Z20                      ; move nozzle upwards
  _FRONT                       ; move the toolhead to the front
  _status_busy
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  _status_ready
  M83                         ; set extruder to relative mode
  G1 E-8 F1800                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F300                ; retract slowly the rest of the way
  G1 E-50 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!
  _status_off

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(250)|int %}
  _FRONT                       ; move the toolhead to the front
  _status_busy
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  _status_ready
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowlyL
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!
  _status_off


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10




[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'ready': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0.0, 'b': 0.35, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
        },
        'nozzle': { # Colors for nozzle states
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'ready': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" # For single Logo LED
#variable_logo_idx:              "1,2,3,4,5,6,7,8" # For PCB Logo
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3" # For single Logo LED
#variable_nozzle_idx:            "9,10" # For PCB Logo
# A comma-separated list of indexes of LEDs in the nozzle

variable_thermal_config: {
        'extruder': {
            'cool_temp': 40,
            'leds': 'logo',
        },
        'heater_bed': {
            'cool_temp': 40,
            'leds': 'nozzle',
        },
    }
# temperatures at which cooling will be considered complete

gcode:
    ; Do nothing

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro _set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro _set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro _status_off]
gcode:
    _set_logo_leds_off transmit=0
    _set_nozzle_leds_off

[gcode_macro _status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="ready" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="ready" transmit=1

[gcode_macro _status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro _status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    _set_nozzle_leds_on

[gcode_macro _status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    _set_nozzle_leds_on

